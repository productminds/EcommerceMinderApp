/* tslint:disable */
/* eslint-disable eslint-comments/no-unlimited-disable */
/* eslint-disable */
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull mobile-app'
 *
 * Required dependencies: @amplitude/analytics-react-native@^0.4.0, @react-native-async-storage/async-storage@^1.17.9
 * Tracking Plan Version: 3
 * Build: 1.0.0
 * Runtime: react-native:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/implementation/mobile-app)
 */

import * as amplitude from '@amplitude/analytics-react-native';

export type ReactNativeClient = amplitude.Types.ReactNativeClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
export type ReactNativeOptions = amplitude.Types.ReactNativeOptions;

export type Environment = 'production' | 'development';

export const ApiKey: Record<Environment, string> = {
  production: '1fe3c891da238dc1d9a693808e41956a',
  development: 'c3aa507cf14e1d7081c56f9125f92040'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: ReactNativeOptions = {
  plan: {
    version: '3',
    branch: 'main',
    source: 'mobile-app',
    versionId: '9168a7db-baf0-4a54-b64f-8496ff215503'
  },
  ...{
    ingestionMetadata: {
      sourceName: 'react-native-typescript-ampli',
      sourceVersion: '2.0.0'
    }
  }
};

export interface LoadOptionsBase { disabled?: boolean }

export type LoadOptionsWithEnvironment = LoadOptionsBase & { environment: Environment; client?: { configuration?: ReactNativeOptions; }; };
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: ReactNativeOptions; } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: ReactNativeClient; } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface AccountCreatedProperties {
  "Account Creation Date": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Enum Values | Google, Email/Password |
   */
  "Account Type": "Google" | "Email/Password";
}

export interface CartViewedProperties {
  "Discount Code"?: string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Subtotal Cart Value": number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  "Total Cart Size": number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Total Cart Value": number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Total Discount": number;
}

export interface ProductAddedProperties {
  "Category ID": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  Price: number;
  "Product ID": string;
  "Product Name": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  Quantity: number;
}

export interface ProductFavoritedProperties {
  "Category ID": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  Price: number;
  "Product ID": string;
  "Product Name": string;
}

export interface ProductRemovedProperties {
  "Category ID": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  Price: number;
  "Product ID": string;
  "Product Name": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  Quantity: number;
}

export interface SearchCompletedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  "Number Of Results": number;
  Searched: string;
}

export interface SearchResultClickedProperties {
  "Category ID": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  Price: number;
  "Product ID": string;
  "Product Name": string;
}

export class AccountCreated implements BaseEvent {
  event_type = 'Account Created';

  constructor(
    public event_properties: AccountCreatedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class CartViewed implements BaseEvent {
  event_type = 'Cart Viewed';

  constructor(
    public event_properties: CartViewedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class HomeViewed implements BaseEvent {
  event_type = 'Home Viewed';
}

export class ProductAdded implements BaseEvent {
  event_type = 'Product Added';

  constructor(
    public event_properties: ProductAddedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ProductFavorited implements BaseEvent {
  event_type = 'Product Favorited';

  constructor(
    public event_properties: ProductFavoritedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ProductRemoved implements BaseEvent {
  event_type = 'Product Removed';

  constructor(
    public event_properties: ProductRemovedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SearchCompleted implements BaseEvent {
  event_type = 'Search Completed';

  constructor(
    public event_properties: SearchCompletedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SearchResultClicked implements BaseEvent {
  event_type = 'Search Result Clicked';

  constructor(
    public event_properties: SearchResultClickedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: ReactNativeClient;

  get client(): ReactNativeClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already initialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...options.client?.configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();

    return this.amplitude!.identify(amplitudeIdentify, options);
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * Flush pending events.
   */
  flush(): PromiseResult<void> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * Account Created
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Account%20Created)
   *
   * Owner: Antonny Santos
   *
   * @param properties The event's properties (e.g. Account Creation Date)
   * @param options Amplitude event options.
   */
  accountCreated(
    properties: AccountCreatedProperties,
    options?: EventOptions,
  ) {
    return this.track(new AccountCreated(properties), options);
  }

  /**
   * Cart Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Cart%20Viewed)
   *
   * Owner: Antonny Santos
   *
   * @param properties The event's properties (e.g. Discount Code)
   * @param options Amplitude event options.
   */
  cartViewed(
    properties: CartViewedProperties,
    options?: EventOptions,
  ) {
    return this.track(new CartViewed(properties), options);
  }

  /**
   * Home Viewed
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Home%20Viewed)
   *
   * Owner: Antonny Santos
   *
   * @param options Amplitude event options.
   */
  homeViewed(
    options?: EventOptions,
  ) {
    return this.track(new HomeViewed(), options);
  }

  /**
   * Product Added
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Product%20Added)
   *
   * Owner: Antonny Santos
   *
   * @param properties The event's properties (e.g. Category ID)
   * @param options Amplitude event options.
   */
  productAdded(
    properties: ProductAddedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ProductAdded(properties), options);
  }

  /**
   * Product Favorited
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Product%20Favorited)
   *
   * Owner: Antonny Santos
   *
   * @param properties The event's properties (e.g. Category ID)
   * @param options Amplitude event options.
   */
  productFavorited(
    properties: ProductFavoritedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ProductFavorited(properties), options);
  }

  /**
   * Product Removed
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Product%20Removed)
   *
   * Owner: Antonny Santos
   *
   * @param properties The event's properties (e.g. Category ID)
   * @param options Amplitude event options.
   */
  productRemoved(
    properties: ProductRemovedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ProductRemoved(properties), options);
  }

  /**
   * Search Completed
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Search%20Completed)
   *
   * Owner: Antonny Santos
   *
   * @param properties The event's properties (e.g. Number Of Results)
   * @param options Amplitude event options.
   */
  searchCompleted(
    properties: SearchCompletedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SearchCompleted(properties), options);
  }

  /**
   * Search Result Clicked
   *
   * [View in Tracking Plan](https://data.amplitude.com/productminds/Minder%20App%20-%20Ecommerce/events/main/latest/Search%20Result%20Clicked)
   *
   * Owner: Antonny Santos
   *
   * @param properties The event's properties (e.g. Category ID)
   * @param options Amplitude event options.
   */
  searchResultClicked(
    properties: SearchResultClickedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SearchResultClicked(properties), options);
  }
}

export const ampli = new Ampli();
